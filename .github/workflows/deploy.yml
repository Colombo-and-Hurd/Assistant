name: CI/CD to Azure Container Apps
on:
  pull_request: { types: [opened, synchronize, reopened, closed] }
  push: { branches: [ main ] }

permissions: { id-token: write, contents: read }
concurrency:
  group: deploy-${{ github.event_name }}-${{ github.ref || github.event.pull_request.number }}
  cancel-in-progress: true

env:
  AZ_SUBSCRIPTION_ID: ${{ vars.AZ_SUBSCRIPTION_ID }}
  AZ_TENANT_ID:       ${{ vars.AZ_TENANT_ID }}
  AZ_RG:              ${{ vars.AZ_RG }}
  AZ_REGION:          ${{ vars.AZ_REGION }}
  ACR_NAME:           ${{ vars.ACR_NAME }}
  ACA_ENV:            ${{ vars.ACA_ENV }}
  APP_STAGING:        ${{ vars.APP_STAGING }}
  APP_PROD:           ${{ vars.APP_PROD }}
  CONTAINER_PORT:     ${{ vars.CONTAINER_PORT }}

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login server
        id: acr
        run: echo "login=$(az acr show -n $ACR_NAME --query loginServer -o tsv)" >> $GITHUB_OUTPUT

      - name: Build & push (az acr build)
        run: |
          az acr build --registry "$ACR_NAME" --image assistant:${{ github.sha }} .

  latest-pr-gate:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    outputs:
      should_deploy: ${{ steps.gate.outputs.should_deploy }}
    steps:
      - uses: actions/github-script@v7
        id: gate
        with:
          script: |
            const {owner, repo, number} = context.issue;
            const prs = await github.paginate(github.rest.pulls.list, { owner, repo, state: 'open', per_page: 100, sort: 'updated', direction: 'desc' });
            core.setOutput('should_deploy', String(prs[0]?.number === number));

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, latest-pr-gate]
    if: github.event_name == 'pull_request' && needs.latest-pr-gate.outputs.should_deploy == 'true'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login server
        id: acr
        run: echo "login=$(az acr show -n $ACR_NAME --query loginServer -o tsv)" >> $GITHUB_OUTPUT

      - name: Verify image exists in ACR (STAGING)
        run: |
          az acr repository show -n "$ACR_NAME" --image assistant:${{ github.sha }} || {
            echo "Image assistant:${{ github.sha }} not found in ACR. Build step may have failed."
            exit 1
          }

      - name: Ensure STAGING app exists (update image + creds, wait)
        run: |
          set -e
          ACR_LOGIN=${{ steps.acr.outputs.login }}
          IMG="$ACR_LOGIN/assistant:${{ github.sha }}"

          if ! az containerapp show -g "$AZ_RG" -n "$APP_STAGING" >/dev/null 2>&1; then
            echo "Creating $APP_STAGING…"
            az containerapp create -g "$AZ_RG" -n "$APP_STAGING" \
              --environment "$ACA_ENV" \
              --ingress external --target-port "$CONTAINER_PORT" \
              --image "$IMG" \
              --registry-server "$ACR_LOGIN" \
              --registry-username "${{ secrets.ACR_USERNAME }}" \
              --registry-password "${{ secrets.ACR_PASSWORD }}" \
              --cpu 0.5 --memory 1Gi
          else
            echo "App exists; setting registry credentials and forcing update to new image…"
            az containerapp registry set -g "$AZ_RG" -n "$APP_STAGING" \
              --server "$ACR_LOGIN" \
              --username "${{ secrets.ACR_USERNAME }}" \
              --password "${{ secrets.ACR_PASSWORD }}" || true

            az containerapp update -g "$AZ_RG" -n "$APP_STAGING" \
              --image "$IMG" \
              --registry-server "$ACR_LOGIN" \
              --registry-username "${{ secrets.ACR_USERNAME }}" \
              --registry-password "${{ secrets.ACR_PASSWORD }}"
          fi

          echo "Waiting for provisioning to finish…"
          for i in {1..30}; do
            STATE=$(az containerapp show -g "$AZ_RG" -n "$APP_STAGING" --query properties.provisioningState -o tsv || echo "Unknown")
            echo "ProvisioningState=$STATE"
            [ "$STATE" = "Succeeded" ] && break
            [ "$STATE" = "Failed" ] && break
            sleep 10
          done

          if [ "$STATE" != "Succeeded" ]; then
            echo "Provisioning failed. Dumping full resource JSON:"
            az containerapp show -g "$AZ_RG" -n "$APP_STAGING" -o json
            exit 1
          fi

      - name: Sync secrets/env (STAGING)
        run: |
          az containerapp secret set -g "$AZ_RG" -n "$APP_STAGING" \
            --secrets OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}' AZURE_SEARCH_KEY='${{ secrets.AZURE_SEARCH_KEY }}'
          az containerapp update -g "$AZ_RG" -n "$APP_STAGING" \
            --set-env-vars \
              OPENAI_API_KEY=secretref:OPENAI_API_KEY \
              AZURE_SEARCH_KEY=secretref:AZURE_SEARCH_KEY \
              AZURE_SEARCH_ENDPOINT='${{ vars.AZURE_SEARCH_ENDPOINT }}' \
              AZURE_SEARCH_INDEX='${{ vars.AZURE_SEARCH_INDEX }}' \
              PORT="$CONTAINER_PORT" HOST="0.0.0.0"

      - name: Deploy (STAGING)
        run: |
          ACR_LOGIN=${{ steps.acr.outputs.login }}
          az containerapp revision set-mode -g "$AZ_RG" -n "$APP_STAGING" --mode Single
          az containerapp update -g "$AZ_RG" -n "$APP_STAGING" --image "$ACR_LOGIN/assistant:${{ github.sha }}"
          az containerapp show -g "$AZ_RG" -n "$APP_STAGING" --query properties.configuration.ingress.fqdn -o tsv

  deploy-prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login server
        id: acr
        run: echo "login=$(az acr show -n $ACR_NAME --query loginServer -o tsv)" >> $GITHUB_OUTPUT

      - name: Verify image exists in ACR (PROD)
        run: |
          az acr repository show -n "$ACR_NAME" --image assistant:${{ github.sha }} || {
            echo "Image assistant:${{ github.sha }} not found in ACR. Build step may have failed."
            exit 1
          }

      - name: Ensure PROD app exists (update image + creds, wait)
        run: |
          set -e
          ACR_LOGIN=${{ steps.acr.outputs.login }}
          IMG="$ACR_LOGIN/assistant:${{ github.sha }}"

          if ! az containerapp show -g "$AZ_RG" -n "$APP_PROD" >/dev/null 2>&1; then
            echo "Creating $APP_PROD…"
            az containerapp create -g "$AZ_RG" -n "$APP_PROD" \
              --environment "$ACA_ENV" \
              --ingress external --target-port "$CONTAINER_PORT" \
              --image "$IMG" \
              --registry-server "$ACR_LOGIN" \
              --registry-username "${{ secrets.ACR_USERNAME }}" \
              --registry-password "${{ secrets.ACR_PASSWORD }}" \
              --cpu 0.5 --memory 1Gi
          else
            az containerapp registry set -g "$AZ_RG" -n "$APP_PROD" \
              --server "$ACR_LOGIN" \
              --username "${{ secrets.ACR_USERNAME }}" \
              --password "${{ secrets.ACR_PASSWORD }}" || true

            az containerapp update -g "$AZ_RG" -n "$APP_PROD" \
              --image "$IMG" \
              --registry-server "$ACR_LOGIN" \
              --registry-username "${{ secrets.ACR_USERNAME }}" \
              --registry-password "${{ secrets.ACR_PASSWORD }}"
          fi

          echo "Waiting for provisioning to finish…"
          for i in {1..30}; do
            STATE=$(az containerapp show -g "$AZ_RG" -n "$APP_PROD" --query properties.provisioningState -o tsv || echo "Unknown")
            echo "ProvisioningState=$STATE"
            [ "$STATE" = "Succeeded" ] && break
            [ "$STATE" = "Failed" ] && break
            sleep 10
          done

          if [ "$STATE" != "Succeeded" ]; then
            echo "Provisioning failed. Dumping full resource JSON:"
            az containerapp show -g "$AZ_RG" -n "$APP_PROD" -o json
            exit 1
          fi

      - name: Sync secrets/env (PROD)
        run: |
          az containerapp secret set -g "$AZ_RG" -n "$APP_PROD" \
            --secrets OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}' AZURE_SEARCH_KEY='${{ secrets.AZURE_SEARCH_KEY }}'
          az containerapp update -g "$AZ_RG" -n "$APP_PROD" \
            --set-env-vars \
              OPENAI_API_KEY=secretref:OPENAI_API_KEY \
              AZURE_SEARCH_KEY=secretref:AZURE_SEARCH_KEY \
              AZURE_SEARCH_ENDPOINT='${{ vars.AZURE_SEARCH_ENDPOINT }}' \
              AZURE_SEARCH_INDEX='${{ vars.AZURE_SEARCH_INDEX }}' \
              PORT="$CONTAINER_PORT" HOST="0.0.0.0"

      - name: Safe rollout
        run: |
          ACR_LOGIN=${{ steps.acr.outputs.login }}
          IMG="$ACR_LOGIN/assistant:${{ github.sha }}"
          az containerapp revision set-mode -g "$AZ_RG" -n "$APP_PROD" --mode Multiple
          az containerapp update -g "$AZ_RG" -n "$APP_PROD" --image "$IMG"
          NEWREV=$(az containerapp revision list -g "$AZ_RG" -n "$APP_PROD" --query "[?properties.active].name | [-1]" -o tsv)
          az containerapp ingress traffic set -g "$AZ_RG" -n "$APP_PROD" --revision-weight $NEWREV=100
          az containerapp revision set-mode -g "$AZ_RG" -n "$APP_PROD" --mode Single
          az containerapp show -g "$AZ_RG" -n "$APP_PROD" --query properties.configuration.ingress.fqdn -o tsv
